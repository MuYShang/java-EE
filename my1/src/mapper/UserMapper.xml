<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="mapper.UserMapper">
    <select id="findUserById" parameterType="int" resultType="pojo.User">
        select * from USER  where id = #{id}
    </select>
    <!-- 根据用户名模糊查询-->
    <!-- ${}：表示一个sql的连接符-->
    <!-- ${value}: 里面的value表示输入参数的参数名称，如果该参数是简单类型，那么${}里面必须是value-->
    <!-- ${}:这种写法存在sql注入的风险，所以要慎用！但是在一些场景下必须使用${}，比如排序时，动态排序的列名-->
    <select id="findUserByName" parameterType="String" resultType="pojo.User">
        select * from USER  where username like '%${value}'
    </select>
    <!--通过OGNL去User对象中查找对应的属性名称-->
    <insert id="insertUser" parameterType="pojo.User">
        <!-- selectKey 标签实现主键返回 -->
        <!-- keyColumn:主键对应的表中的哪一列 -->
        <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
        <!-- order：设置在执行insert语句前执行查询id的sql，在执行insert语句之后执行查询id的sql -->
        <!-- resultType：设置返回的id的类型 -->
        <selectKey keyColumn="id" keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user (username,sex,birthday,address) values (#{username},#{sex},#{birthday},#{address})
    </insert>
</mapper>