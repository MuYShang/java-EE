<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="test">
    <select id="findUserById" parameterType="Integer" resultType="com.hwl.mybatis.pojo.User">
        select * from user where id =#{id}
    </select>

    <!--如果返回多个结果，mybatis会自动把返回的结果凡在list容器中-->
    <!--resultMap的配置和返回一个结果的配置一样-->
    <select id="findUserByName" parameterType="string" resultType="com.hwl.mybatis.pojo.User">
        select  * from user where username like #{usernsme}
    </select>

    <!--如果传入简单类型参数${}里面必须写value-->
    <select id="findUserByName2" parameterType="string" resultType="com.hwl.mybatis.pojo.User">
        select * from user where username like '%${value}%'
    </select>

    <!--保存用户-->
    <insert id="savaUser" parameterType="com.hwl.mybatis.pojo.User">
        <!-- selectKey 标签实现主键返回 -->
        <!-- keyColumn:主键对应的表中的哪一列 -->
        <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
        <!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql -->
        <!-- resultType：设置返回的id的类型 -->
        <selectKey keyColumn="id" keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user (username,sex,birthday,address) values (#{username},#{sex},#{birthday},#{address})
    </insert>

    <!--更新-->
    <update id="updateUser" parameterType="com.hwl.mybatis.pojo.User">
        update user set username=#{username} where id = #{id}
    </update>

    <!--删除-->
    <delete id="deleteUser" parameterType="int" >
        delete from user where id = #{id}
    </delete>
</mapper>
